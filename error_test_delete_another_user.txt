self = <Response [404]>, kwargs = {}

    def json(self, **kwargs):
        r"""Returns the json-encoded content of a response, if any.

        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises requests.exceptions.JSONDecodeError: If the response body does not
            contain valid json.
        """

        if not self.encoding and self.content and len(self.content) > 3:
            # No encoding set. JSON RFC 4627 section 3 states we should expect
            # UTF-8, -16 or -32. Detect which one to use; If the detection or
            # decoding fails, fall back to `self.text` (using charset_normalizer to make
            # a best guess).
            encoding = guess_json_utf(self.content)
            if encoding is not None:
                try:
                    return complexjson.loads(
                        self.content.decode(encoding), **kwargs
                    )
                except UnicodeDecodeError:
                    # Wrong UTF codec detected; usually because it's not UTF-8
                    # but some other 8-bit codec.  This is an RFC violation,
                    # and the server didn't bother to tell us what codec *was*
                    # used.
                    pass

        try:
>           return complexjson.loads(self.text, **kwargs)

env\lib\site-packages\requests\models.py:910:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

s = 'User not found', encoding = None, cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None
kw = {}

    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
        containing a JSON document) to a Python object.

        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).

        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders that rely on the
        order that the key and value pairs are decoded (for example,
        collections.OrderedDict will remember the order of insertion). If
        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.

        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).

        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).

        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.

        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.

        The ``encoding`` argument is ignored and deprecated.

        """
        if isinstance(s, str):
            if s.startswith('\ufeff'):
                raise JSONDecodeError("Unexpected UTF-8 BOM (decode using utf-8-sig)",
                                      s, 0)
        else:
            if not isinstance(s, (bytes, bytearray)):
                raise TypeError('the JSON object must be str, bytes or bytearray, '
                                'not {!r}'.format(s.__class__.__name__))
            s = s.decode(detect_encoding(s), 'surrogatepass')

        if (cls is None and object_hook is None and
                parse_int is None and parse_float is None and
                parse_constant is None and object_pairs_hook is None and not kw):
>           return _default_decoder.decode(s)

..\..\..\appdata\local\programs\python\python36\lib\json\__init__.py:354:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <json.decoder.JSONDecoder object at 0x000000C605416A90>, s = 'User not found', _w = <built-in method match of _sre.SRE_Pattern object at 0x000000C6053AA9F0>


    def decode(self, s, _w=WHITESPACE.match):
        """Return the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).

        """
>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())

..\..\..\appdata\local\programs\python\python36\lib\json\decoder.py:339:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <json.decoder.JSONDecoder object at 0x000000C605416A90>, s = 'User not found', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

..\..\..\appdata\local\programs\python\python36\lib\json\decoder.py:357: JSONDecodeError

During handling of the above exception, another exception occurred:

response = <Response [404]>, name = 'id', expected_value = '92502', error_message = 'Пользователь с id = 92502 не найден'

    @staticmethod # поэтому здесь напишем staticmethod.
    def assert_json_value_by_name(response: Response, name, expected_value, error_message): # на вход эта функция должна получать объект с ответом сервера, чтобы п
олучить из него текст, также имя по которому искать значение в json, ожидаемое значение и текст ошибки, в случае если это значение не удается найти
        try:
>           response_as_dict = response.json()

lib\assertions.py:10:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Response [404]>, kwargs = {}

    def json(self, **kwargs):
        r"""Returns the json-encoded content of a response, if any.

        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises requests.exceptions.JSONDecodeError: If the response body does not
            contain valid json.
        """

        if not self.encoding and self.content and len(self.content) > 3:
            # No encoding set. JSON RFC 4627 section 3 states we should expect
            # UTF-8, -16 or -32. Detect which one to use; If the detection or
            # decoding fails, fall back to `self.text` (using charset_normalizer to make
            # a best guess).
            encoding = guess_json_utf(self.content)
            if encoding is not None:
                try:
                    return complexjson.loads(
                        self.content.decode(encoding), **kwargs
                    )
                except UnicodeDecodeError:
                    # Wrong UTF codec detected; usually because it's not UTF-8
                    # but some other 8-bit codec.  This is an RFC violation,
                    # and the server didn't bother to tell us what codec *was*
                    # used.
                    pass

        try:
            return complexjson.loads(self.text, **kwargs)
        except JSONDecodeError as e:
            # Catch JSON-related errors and raise as requests.JSONDecodeError
            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError
            if is_py2: # e is a ValueError
                raise RequestsJSONDecodeError(e.message)
            else:
>               raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
E               requests.exceptions.JSONDecodeError: [Errno Expecting value] User not found: 0

env\lib\site-packages\requests\models.py:917: JSONDecodeError

During handling of the above exception, another exception occurred:

self = <tests.test_user_delete.TestUserDelete object at 0x000000C605AB9470>

    def test_delete_another_user(self):
        # РЕГИСТРАЦИЯ

        # Первый пользователь
        register_data_first = self.prepare_registration_data()
        response1_first_user = MyRequests.post("/user/", data=register_data_first)


        # убедимся, что на запрос, который мы послали сервер ответил кодом ответа 200 и что в ответе есть id нового пользователя:
        Assetions.assert_code_status(response1_first_user, 200)
        Assetions.assert_json_has_key(response1_first_user, "id")

        email_1 = register_data_first['email']
        password_1 = register_data_first['password']
        user_id_first = self.get_json_value(response1_first_user, "id")

        time.sleep(2)

        # Второй пользователь
        register_data_second = self.prepare_registration_data()
        response1_second_user = MyRequests.post("/user/", data=register_data_second)

        # убедимся, что на запрос, который мы послали сервер ответил кодом ответа 200 и что в ответе есть id нового пользователя:
        Assetions.assert_code_status(response1_second_user, 200)
        Assetions.assert_json_has_key(response1_second_user, "id")

        email_2 = register_data_second['email']
        password_2 = register_data_second['password']
        user_id_second = self.get_json_value(response1_second_user, "id")

        # АВТОРИЗАЦИЯ

        # Первый пользователь
        login_data_first = {
            'email': email_1,
            'password': password_1
        }

        response2_first_user = MyRequests.post("/user/login",
                                               data=login_data_first)  # авторизация по новым пользователем

        # вытаскиваем нужные нам значения:
        auth_sid_1 = self.get_cookie(response2_first_user, 'auth_sid')
        token_1 = self.get_header(response2_first_user, "x-csrf-token")

        # Второй пользователь
        login_data_second = {
            'email': email_2,
            'password': password_2
        }

        response2_second_user = MyRequests.post("/user/login",
                                                data=login_data_second)  # авторизация по новым пользователем

        # вытаскиваем нужные нам значения:
        auth_sid_2 = self.get_cookie(response2_second_user, 'auth_sid')
        token_2 = self.get_header(response2_second_user, "x-csrf-token")

        # УДАЛЕНИЕ
        #удаление второго пользователя при авторизации первым

        response3 = MyRequests.delete(f"/user/{user_id_second}",
                                      headers={'x-csrf-token': token_1},
                                      cookies={'auth_sid': auth_sid_1})

        # Assetions.assert_code_status(response3, 400)

        # ПОЛУЧЕНИЕ
        # Первый пользователь
        response4_first_user = MyRequests.get(f"/user/{user_id_first}",
                                              headers={'x-csrf-token': token_1},
                                              cookies={'auth_sid': auth_sid_1})

        # проверка, что пользователь не удален
        # Assetions.assert_code_status(response4_first_user, 200)
        Assetions.assert_json_value_by_name(response4_first_user,
                                            'id',
                                            user_id_first,
>                                           f"Пользователь с id = {user_id_first} не найден")

tests\test_user_delete.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

response = <Response [404]>, name = 'id', expected_value = '92502', error_message = 'Пользователь с id = 92502 не найден'

    @staticmethod # поэтому здесь напишем staticmethod.
    def assert_json_value_by_name(response: Response, name, expected_value, error_message): # на вход эта функция должна получать объект с ответом сервера, чтобы п
олучить из него текст, также имя по которому искать значение в json, ожидаемое значение и текст ошибки, в случае если это значение не удается найти
        try:
            response_as_dict = response.json()
        except json.JSONDecodeError:
>           assert False, f"Response is not in JSON format. Response text is '{response.text}'"
E           AssertionError: Response is not in JSON format. Response text is 'User not found'

lib\assertions.py:12: AssertionError
